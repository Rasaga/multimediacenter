/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.rsg.iu;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Ramon
 */
public class RColoresPersonalizado extends javax.swing.JPanel implements ListCellRenderer<Object> {

    /**
     * Componente propio que creará un CellRender de colores. Está configurado
     * para crearlo de cualquier valor, pero en mi aplicación lo usaré para
     * colores solo.
     */
    public RColoresPersonalizado() {
        initComponents();
    }
    
    /**
     * Obtiene los componentes del ListCellRenderer
     * 
     * @param list, lista de componentes de la lista
     * @param value, valor del componente selecionado
     * @param index, indice del componente selecionado
     * @param isSelected, comprueba si el componente esta seleccionado
     * @param cellHasFocus, si el elemento tiene focus
     * @return Devuelve el componente selecionado del ListCellRenderer
     */

    public Component getListCellRendererComponent(JList<?> list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {
        if (value instanceof Color) // debo comprobar si los valores son colores
        {
            miBoton.setBackground((Color) value); // cambio el color de fondo del boton añadido
        }

        Color background;
        Color foreground;

        // check if this cell represents the current DnD drop location
        JList.DropLocation dropLocation = list.getDropLocation();
        if (dropLocation != null
                && !dropLocation.isInsert()
                && dropLocation.getIndex() == index) {

            background = Color.BLUE;
            foreground = Color.WHITE;

            // check if this cell is selected
        } else if (isSelected) {
            background = Color.RED;
            foreground = Color.WHITE;

            // unselected, and not the DnD drop location
        } else {
            background = Color.WHITE;
            foreground = Color.BLACK;
        };

        setBackground(background);
        setForeground(foreground);

        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        miBoton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        miBoton.setText(" ");
        add(miBoton, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton miBoton;
    // End of variables declaration//GEN-END:variables
}
