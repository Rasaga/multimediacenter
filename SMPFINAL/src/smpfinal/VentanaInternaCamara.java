/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smpfinal;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 *
 * @author Ramon
 */
public class VentanaInternaCamara extends VentanaInternaSM {
    
    private Webcam camara = null;

    /**
     * VentanaInterna de la webCam. Se usa para visualizar el contenido
     * obtenido por webcam.
     */
    private VentanaInternaCamara() {
        initComponents();
        camara = Webcam.getDefault();
        if (camara != null) {
            // Coger el tamaño maximo de muestreo, por defecto coge el minimo
            Dimension resoluciones[] = camara.getViewSizes();
            Dimension maxRes = resoluciones[resoluciones.length - 1];
            camara.setViewSize(maxRes);
            WebcamPanel areaVisual = new WebcamPanel(camara);
            if (areaVisual != null) {
                //System.out.println("NO ES NULO LA WEBCAM");
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
    }
    
    @Override
    public Webcam getCamera(){
        return camara;
    }
    
    /*
    Ahora getSnapshot llamará al método getImage de la cámara para
    tomar la instantanea.
    */
    @Override
    public BufferedImage getSnapshot(){
        return this.getCamera().getImage();
    }
    
    //public BufferedImage getSnapshot(){
    //    
    //}
    // Al igual que JMF, hay que controlar cuando no haya cam o de error
    // para ello, creamos un metodo getinstance
    
    public static VentanaInternaCamara getInstance() {
        VentanaInternaCamara v = new VentanaInternaCamara();
        return (v.camara != null ? v : null);
    }
    
    // Metodo close, para cerrar la cam
    
    public void close() {
        if (camara != null) {
            try {
                camara.close();
            } catch (Exception e) {
                System.err.println("VentanaInternaCamara: " + e);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        this.close();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
